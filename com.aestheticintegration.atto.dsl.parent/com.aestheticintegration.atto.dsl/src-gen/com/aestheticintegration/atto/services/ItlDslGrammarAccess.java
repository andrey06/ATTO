/*
 * generated by Xtext 2.12.0
 */
package com.aestheticintegration.atto.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ItlDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDefImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cDatatypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDatatypesDefDataTypeParserRuleCall_1_0 = (RuleCall)cDatatypesAssignment_1.eContents().get(0);
		private final Assignment cDatavaluesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatavaluesDefDataValueParserRuleCall_2_0 = (RuleCall)cDatavaluesAssignment_2.eContents().get(0);
		private final Assignment cFunctionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionsDefFunctionParserRuleCall_3_0 = (RuleCall)cFunctionsAssignment_3.eContents().get(0);
		private final Assignment cTestsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestsDefTestParserRuleCall_4_0 = (RuleCall)cTestsAssignment_4.eContents().get(0);
		
		//Model:
		//	imports+=DefImport*
		//	datatypes+=DefDataType*
		//	datavalues+=DefDataValue*
		//	functions+=DefFunction*
		//	tests+=DefTest*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DefImport* datatypes+=DefDataType* datavalues+=DefDataValue* functions+=DefFunction* tests+=DefTest*
		public Group getGroup() { return cGroup; }
		
		//imports+=DefImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DefImport
		public RuleCall getImportsDefImportParserRuleCall_0_0() { return cImportsDefImportParserRuleCall_0_0; }
		
		//datatypes+=DefDataType*
		public Assignment getDatatypesAssignment_1() { return cDatatypesAssignment_1; }
		
		//DefDataType
		public RuleCall getDatatypesDefDataTypeParserRuleCall_1_0() { return cDatatypesDefDataTypeParserRuleCall_1_0; }
		
		//datavalues+=DefDataValue*
		public Assignment getDatavaluesAssignment_2() { return cDatavaluesAssignment_2; }
		
		//DefDataValue
		public RuleCall getDatavaluesDefDataValueParserRuleCall_2_0() { return cDatavaluesDefDataValueParserRuleCall_2_0; }
		
		//functions+=DefFunction*
		public Assignment getFunctionsAssignment_3() { return cFunctionsAssignment_3; }
		
		//DefFunction
		public RuleCall getFunctionsDefFunctionParserRuleCall_3_0() { return cFunctionsDefFunctionParserRuleCall_3_0; }
		
		//tests+=DefTest*
		public Assignment getTestsAssignment_4() { return cTestsAssignment_4; }
		
		//DefTest
		public RuleCall getTestsDefTestParserRuleCall_4_0() { return cTestsDefTestParserRuleCall_4_0; }
	}
	public class DefImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DefImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DefImport:
		//	'import' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class DefDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DefDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsInputParamParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DefDataType:
		//	'datatype' name=ID '{' fields+=InputParam* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'datatype' name=ID '{' fields+=InputParam* '}'
		public Group getGroup() { return cGroup; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=InputParam*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//InputParam
		public RuleCall getFieldsInputParamParserRuleCall_3_0() { return cFieldsInputParamParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DefDataValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DefDataValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatavalueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataTypeInstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataTypeInstanceDataTypeInstanceParserRuleCall_3_0 = (RuleCall)cDataTypeInstanceAssignment_3.eContents().get(0);
		
		//DefDataValue:
		//	'datavalue' name=ID '=' dataTypeInstance=DataTypeInstance;
		@Override public ParserRule getRule() { return rule; }
		
		//'datavalue' name=ID '=' dataTypeInstance=DataTypeInstance
		public Group getGroup() { return cGroup; }
		
		//'datavalue'
		public Keyword getDatavalueKeyword_0() { return cDatavalueKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//dataTypeInstance=DataTypeInstance
		public Assignment getDataTypeInstanceAssignment_3() { return cDataTypeInstanceAssignment_3; }
		
		//DataTypeInstance
		public RuleCall getDataTypeInstanceDataTypeInstanceParserRuleCall_3_0() { return cDataTypeInstanceDataTypeInstanceParserRuleCall_3_0; }
	}
	public class DataTypeInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DataTypeInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDefDataTypeDefDataTypeCrossReference_0_0 = (CrossReference)cDefDataTypeAssignment_0.eContents().get(0);
		private final RuleCall cDefDataTypeDefDataTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cDefDataTypeDefDataTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLiteralsLiteralParserRuleCall_2_0_0 = (RuleCall)cLiteralsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_2_1_1_0 = (RuleCall)cLiteralsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeInstance:
		//	defDataType=[DefDataType] '(' (literals+=Literal (',' literals+=Literal)*)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//defDataType=[DefDataType] '(' (literals+=Literal (',' literals+=Literal)*)* ')'
		public Group getGroup() { return cGroup; }
		
		//defDataType=[DefDataType]
		public Assignment getDefDataTypeAssignment_0() { return cDefDataTypeAssignment_0; }
		
		//[DefDataType]
		public CrossReference getDefDataTypeDefDataTypeCrossReference_0_0() { return cDefDataTypeDefDataTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getDefDataTypeDefDataTypeIDTerminalRuleCall_0_0_1() { return cDefDataTypeDefDataTypeIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(literals+=Literal (',' literals+=Literal)*)*
		public Group getGroup_2() { return cGroup_2; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_2_0() { return cLiteralsAssignment_2_0; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_2_0_0() { return cLiteralsLiteralParserRuleCall_2_0_0; }
		
		//(',' literals+=Literal)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_2_1_1() { return cLiteralsAssignment_2_1_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_2_1_1_0() { return cLiteralsLiteralParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DefFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DefFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedName2ParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_0_0 = (RuleCall)cInputParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputParamsInputParamParserRuleCall_3_1_1_0 = (RuleCall)cInputParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutputDataTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutputDataTypeDataTypeParserRuleCall_6_0 = (RuleCall)cOutputDataTypeAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cFunctionBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFunctionBodyFunctionBodyParserRuleCall_8_0 = (RuleCall)cFunctionBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DefFunction:
		//	'function' name=QualifiedName2 '(' (inputParams+=InputParam (',' inputParams+=InputParam)*)? ')' ':'
		//	outputDataType=DataType '{'
		//	functionBody=FunctionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=QualifiedName2 '(' (inputParams+=InputParam (',' inputParams+=InputParam)*)? ')' ':'
		//outputDataType=DataType '{' functionBody=FunctionBody '}'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=QualifiedName2
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName2
		public RuleCall getNameQualifiedName2ParserRuleCall_1_0() { return cNameQualifiedName2ParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(inputParams+=InputParam (',' inputParams+=InputParam)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//inputParams+=InputParam
		public Assignment getInputParamsAssignment_3_0() { return cInputParamsAssignment_3_0; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_0_0() { return cInputParamsInputParamParserRuleCall_3_0_0; }
		
		//(',' inputParams+=InputParam)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//inputParams+=InputParam
		public Assignment getInputParamsAssignment_3_1_1() { return cInputParamsAssignment_3_1_1; }
		
		//InputParam
		public RuleCall getInputParamsInputParamParserRuleCall_3_1_1_0() { return cInputParamsInputParamParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//outputDataType=DataType
		public Assignment getOutputDataTypeAssignment_6() { return cOutputDataTypeAssignment_6; }
		
		//DataType
		public RuleCall getOutputDataTypeDataTypeParserRuleCall_6_0() { return cOutputDataTypeDataTypeParserRuleCall_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//functionBody=FunctionBody
		public Assignment getFunctionBodyAssignment_8() { return cFunctionBodyAssignment_8; }
		
		//FunctionBody
		public RuleCall getFunctionBodyFunctionBodyParserRuleCall_8_0() { return cFunctionBodyFunctionBodyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class InputParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.InputParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputDataTypeDataTypeParserRuleCall_2_0 = (RuleCall)cInputDataTypeAssignment_2.eContents().get(0);
		
		////ClassName:
		////	'className' className=ID ('.' ID)*
		////;
		//InputParam:
		//	name=ID ':' inputDataType=DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' inputDataType=DataType
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//inputDataType=DataType
		public Assignment getInputDataTypeAssignment_2() { return cInputDataTypeAssignment_2; }
		
		//DataType
		public RuleCall getInputDataTypeDataTypeParserRuleCall_2_0() { return cInputDataTypeDataTypeParserRuleCall_2_0; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBooleanAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanAssignment_0.eContents().get(0);
		private final Assignment cBooleanObjAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBooleanObjBooleanKeyword_1_0 = (Keyword)cBooleanObjAssignment_1.eContents().get(0);
		private final Assignment cShortAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cShortShortKeyword_2_0 = (Keyword)cShortAssignment_2.eContents().get(0);
		private final Assignment cShortObjAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cShortObjShortKeyword_3_0 = (Keyword)cShortObjAssignment_3.eContents().get(0);
		private final Assignment cIntAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cIntIntKeyword_4_0 = (Keyword)cIntAssignment_4.eContents().get(0);
		private final Assignment cIntObjAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cIntObjIntegerKeyword_5_0 = (Keyword)cIntObjAssignment_5.eContents().get(0);
		private final Assignment cLongAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cLongLongKeyword_6_0 = (Keyword)cLongAssignment_6.eContents().get(0);
		private final Assignment cLongObjAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cLongObjLongKeyword_7_0 = (Keyword)cLongObjAssignment_7.eContents().get(0);
		private final Assignment cFloatAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cFloatFloatKeyword_8_0 = (Keyword)cFloatAssignment_8.eContents().get(0);
		private final Assignment cFloatObjAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cFloatObjFloatKeyword_9_0 = (Keyword)cFloatObjAssignment_9.eContents().get(0);
		private final Assignment cDoubleAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cDoubleDoubleKeyword_10_0 = (Keyword)cDoubleAssignment_10.eContents().get(0);
		private final Assignment cDoubleObjAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cDoubleObjDoubleKeyword_11_0 = (Keyword)cDoubleObjAssignment_11.eContents().get(0);
		private final Assignment cStringAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cStringStringKeyword_12_0 = (Keyword)cStringAssignment_12.eContents().get(0);
		private final Assignment cDefDataTypeAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final CrossReference cDefDataTypeDefDataTypeCrossReference_13_0 = (CrossReference)cDefDataTypeAssignment_13.eContents().get(0);
		private final RuleCall cDefDataTypeDefDataTypeIDTerminalRuleCall_13_0_1 = (RuleCall)cDefDataTypeDefDataTypeCrossReference_13_0.eContents().get(1);
		
		//DataType:
		//	boolean='boolean'
		//	| booleanObj='Boolean' // Primitive DataType
		//	//|	BYTE='byte'
		//	//|	BYTEOBJ='Byte'
		//	//|	CHAR='char'
		//	//|	CHARACTER='Character'
		//
		//	| short='short'
		//	| shortObj='Short'
		//	| int='int'
		//	| intObj='Integer' // Primitive DataType
		//	| long='long'
		//	| longObj='Long'
		//	| float='float'
		//	| floatObj='Float' // Primitive DataType
		//	| double='double'
		//	| doubleObj='Double'
		//	| string='String' // Primitive DataType
		//
		//	| defDataType=[DefDataType];
		@Override public ParserRule getRule() { return rule; }
		
		//boolean='boolean' | booleanObj='Boolean' // Primitive DataType
		////|	BYTE='byte'
		////|	BYTEOBJ='Byte'
		////|	CHAR='char'
		////|	CHARACTER='Character'
		//| short='short' | shortObj='Short' | int='int' | intObj='Integer' // Primitive DataType
		//| long='long' | longObj='Long' | float='float' | floatObj='Float' // Primitive DataType
		//| double='double' | doubleObj='Double' | string='String' // Primitive DataType
		//| defDataType=[DefDataType]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//boolean='boolean'
		public Assignment getBooleanAssignment_0() { return cBooleanAssignment_0; }
		
		//'boolean'
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }
		
		//booleanObj='Boolean'
		public Assignment getBooleanObjAssignment_1() { return cBooleanObjAssignment_1; }
		
		//'Boolean'
		public Keyword getBooleanObjBooleanKeyword_1_0() { return cBooleanObjBooleanKeyword_1_0; }
		
		//short='short'
		public Assignment getShortAssignment_2() { return cShortAssignment_2; }
		
		//'short'
		public Keyword getShortShortKeyword_2_0() { return cShortShortKeyword_2_0; }
		
		//shortObj='Short'
		public Assignment getShortObjAssignment_3() { return cShortObjAssignment_3; }
		
		//'Short'
		public Keyword getShortObjShortKeyword_3_0() { return cShortObjShortKeyword_3_0; }
		
		//int='int'
		public Assignment getIntAssignment_4() { return cIntAssignment_4; }
		
		//'int'
		public Keyword getIntIntKeyword_4_0() { return cIntIntKeyword_4_0; }
		
		//intObj='Integer'
		public Assignment getIntObjAssignment_5() { return cIntObjAssignment_5; }
		
		//'Integer'
		public Keyword getIntObjIntegerKeyword_5_0() { return cIntObjIntegerKeyword_5_0; }
		
		//long='long'
		public Assignment getLongAssignment_6() { return cLongAssignment_6; }
		
		//'long'
		public Keyword getLongLongKeyword_6_0() { return cLongLongKeyword_6_0; }
		
		//longObj='Long'
		public Assignment getLongObjAssignment_7() { return cLongObjAssignment_7; }
		
		//'Long'
		public Keyword getLongObjLongKeyword_7_0() { return cLongObjLongKeyword_7_0; }
		
		//float='float'
		public Assignment getFloatAssignment_8() { return cFloatAssignment_8; }
		
		//'float'
		public Keyword getFloatFloatKeyword_8_0() { return cFloatFloatKeyword_8_0; }
		
		//floatObj='Float'
		public Assignment getFloatObjAssignment_9() { return cFloatObjAssignment_9; }
		
		//'Float'
		public Keyword getFloatObjFloatKeyword_9_0() { return cFloatObjFloatKeyword_9_0; }
		
		//double='double'
		public Assignment getDoubleAssignment_10() { return cDoubleAssignment_10; }
		
		//'double'
		public Keyword getDoubleDoubleKeyword_10_0() { return cDoubleDoubleKeyword_10_0; }
		
		//doubleObj='Double'
		public Assignment getDoubleObjAssignment_11() { return cDoubleObjAssignment_11; }
		
		//'Double'
		public Keyword getDoubleObjDoubleKeyword_11_0() { return cDoubleObjDoubleKeyword_11_0; }
		
		//string='String'
		public Assignment getStringAssignment_12() { return cStringAssignment_12; }
		
		//'String'
		public Keyword getStringStringKeyword_12_0() { return cStringStringKeyword_12_0; }
		
		//defDataType=[DefDataType]
		public Assignment getDefDataTypeAssignment_13() { return cDefDataTypeAssignment_13; }
		
		//[DefDataType]
		public CrossReference getDefDataTypeDefDataTypeCrossReference_13_0() { return cDefDataTypeDefDataTypeCrossReference_13_0; }
		
		//ID
		public RuleCall getDefDataTypeDefDataTypeIDTerminalRuleCall_13_0_1() { return cDefDataTypeDefDataTypeIDTerminalRuleCall_13_0_1; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.FunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//FunctionBody:
		//	{FunctionBody} statement+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionBody} statement+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{FunctionBody}
		public Action getFunctionBodyAction_0() { return cFunctionBodyAction_0; }
		
		//statement+=Statement*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIfStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementIfStatementParserRuleCall_0_0 = (RuleCall)cIfStatementAssignment_0.eContents().get(0);
		private final Assignment cOutputExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOutputExpressionOutputExpressionParserRuleCall_1_0 = (RuleCall)cOutputExpressionAssignment_1.eContents().get(0);
		
		//Statement:
		//	ifStatement=IfStatement
		//	| outputExpression=OutputExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//ifStatement=IfStatement | outputExpression=OutputExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ifStatement=IfStatement
		public Assignment getIfStatementAssignment_0() { return cIfStatementAssignment_0; }
		
		//IfStatement
		public RuleCall getIfStatementIfStatementParserRuleCall_0_0() { return cIfStatementIfStatementParserRuleCall_0_0; }
		
		//outputExpression=OutputExpression
		public Assignment getOutputExpressionAssignment_1() { return cOutputExpressionAssignment_1; }
		
		//OutputExpression
		public RuleCall getOutputExpressionOutputExpressionParserRuleCall_1_0() { return cOutputExpressionOutputExpressionParserRuleCall_1_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputBoolExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputBoolExpressionBoolExpressionParserRuleCall_2_0 = (RuleCall)cInputBoolExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSignAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Alternatives cSignAlternatives_3_0_0 = (Alternatives)cSignAssignment_3_0.eContents().get(0);
		private final Keyword cSignAmpersandAmpersandKeyword_3_0_0_0 = (Keyword)cSignAlternatives_3_0_0.eContents().get(0);
		private final Keyword cSignVerticalLineVerticalLineKeyword_3_0_0_1 = (Keyword)cSignAlternatives_3_0_0.eContents().get(1);
		private final Assignment cInputBoolExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputBoolExpressionBoolExpressionParserRuleCall_3_1_0 = (RuleCall)cInputBoolExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cThenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenExpOrIfStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenExpOrIfStatementExpOrIfStatementParserRuleCall_6_0 = (RuleCall)cThenExpOrIfStatementAssignment_6.eContents().get(0);
		private final Keyword cElseKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseExpOrIfStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseExpOrIfStatementExpOrIfStatementParserRuleCall_8_0 = (RuleCall)cElseExpOrIfStatementAssignment_8.eContents().get(0);
		private final Keyword cEndifKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//IfStatement:
		//	'if' '(' inputBoolExpression+=BoolExpression (sign+=('&&' | '||') inputBoolExpression+=BoolExpression)* ')'
		//	'then' thenExpOrIfStatement=ExpOrIfStatement
		//	'else' elseExpOrIfStatement=ExpOrIfStatement
		//	'endif';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' inputBoolExpression+=BoolExpression (sign+=('&&' | '||') inputBoolExpression+=BoolExpression)* ')' 'then'
		//thenExpOrIfStatement=ExpOrIfStatement 'else' elseExpOrIfStatement=ExpOrIfStatement 'endif'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputBoolExpression+=BoolExpression
		public Assignment getInputBoolExpressionAssignment_2() { return cInputBoolExpressionAssignment_2; }
		
		//BoolExpression
		public RuleCall getInputBoolExpressionBoolExpressionParserRuleCall_2_0() { return cInputBoolExpressionBoolExpressionParserRuleCall_2_0; }
		
		//(sign+=('&&' | '||') inputBoolExpression+=BoolExpression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//sign+=('&&' | '||')
		public Assignment getSignAssignment_3_0() { return cSignAssignment_3_0; }
		
		//('&&' | '||')
		public Alternatives getSignAlternatives_3_0_0() { return cSignAlternatives_3_0_0; }
		
		//'&&'
		public Keyword getSignAmpersandAmpersandKeyword_3_0_0_0() { return cSignAmpersandAmpersandKeyword_3_0_0_0; }
		
		//'||'
		public Keyword getSignVerticalLineVerticalLineKeyword_3_0_0_1() { return cSignVerticalLineVerticalLineKeyword_3_0_0_1; }
		
		//inputBoolExpression+=BoolExpression
		public Assignment getInputBoolExpressionAssignment_3_1() { return cInputBoolExpressionAssignment_3_1; }
		
		//BoolExpression
		public RuleCall getInputBoolExpressionBoolExpressionParserRuleCall_3_1_0() { return cInputBoolExpressionBoolExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'then'
		public Keyword getThenKeyword_5() { return cThenKeyword_5; }
		
		//thenExpOrIfStatement=ExpOrIfStatement
		public Assignment getThenExpOrIfStatementAssignment_6() { return cThenExpOrIfStatementAssignment_6; }
		
		//ExpOrIfStatement
		public RuleCall getThenExpOrIfStatementExpOrIfStatementParserRuleCall_6_0() { return cThenExpOrIfStatementExpOrIfStatementParserRuleCall_6_0; }
		
		//'else'
		public Keyword getElseKeyword_7() { return cElseKeyword_7; }
		
		//elseExpOrIfStatement=ExpOrIfStatement
		public Assignment getElseExpOrIfStatementAssignment_8() { return cElseExpOrIfStatementAssignment_8; }
		
		//ExpOrIfStatement
		public RuleCall getElseExpOrIfStatementExpOrIfStatementParserRuleCall_8_0() { return cElseExpOrIfStatementExpOrIfStatementParserRuleCall_8_0; }
		
		//'endif'
		public Keyword getEndifKeyword_9() { return cEndifKeyword_9; }
	}
	public class ExpOrIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.ExpOrIfStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOutputExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOutputExpressionOutputExpressionParserRuleCall_0_0 = (RuleCall)cOutputExpressionAssignment_0.eContents().get(0);
		private final Assignment cIfStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementIfStatementParserRuleCall_1_0 = (RuleCall)cIfStatementAssignment_1.eContents().get(0);
		
		//ExpOrIfStatement:
		//	outputExpression=OutputExpression
		//	| ifStatement=IfStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//outputExpression=OutputExpression | ifStatement=IfStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//outputExpression=OutputExpression
		public Assignment getOutputExpressionAssignment_0() { return cOutputExpressionAssignment_0; }
		
		//OutputExpression
		public RuleCall getOutputExpressionOutputExpressionParserRuleCall_0_0() { return cOutputExpressionOutputExpressionParserRuleCall_0_0; }
		
		//ifStatement=IfStatement
		public Assignment getIfStatementAssignment_1() { return cIfStatementAssignment_1; }
		
		//IfStatement
		public RuleCall getIfStatementIfStatementParserRuleCall_1_0() { return cIfStatementIfStatementParserRuleCall_1_0; }
	}
	public class BoolExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.BoolExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteralLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteralLeftLiteralParserRuleCall_0_0 = (RuleCall)cLiteralLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSignAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cSignAlternatives_1_0_0 = (Alternatives)cSignAssignment_1_0.eContents().get(0);
		private final Keyword cSignLessThanSignEqualsSignKeyword_1_0_0_0 = (Keyword)cSignAlternatives_1_0_0.eContents().get(0);
		private final Keyword cSignGreaterThanSignEqualsSignKeyword_1_0_0_1 = (Keyword)cSignAlternatives_1_0_0.eContents().get(1);
		private final Keyword cSignGreaterThanSignKeyword_1_0_0_2 = (Keyword)cSignAlternatives_1_0_0.eContents().get(2);
		private final Keyword cSignLessThanSignKeyword_1_0_0_3 = (Keyword)cSignAlternatives_1_0_0.eContents().get(3);
		private final Keyword cSignEqualsSignKeyword_1_0_0_4 = (Keyword)cSignAlternatives_1_0_0.eContents().get(4);
		private final Keyword cSignLessThanSignGreaterThanSignKeyword_1_0_0_5 = (Keyword)cSignAlternatives_1_0_0.eContents().get(5);
		private final Assignment cLiteralRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLiteralRightLiteralParserRuleCall_1_1_0 = (RuleCall)cLiteralRightAssignment_1_1.eContents().get(0);
		
		//BoolExpression:
		//	literalLeft=Literal (sign=('<=' | '>=' | '>' | '<' | '=' | '<>') literalRight=Literal)?;
		@Override public ParserRule getRule() { return rule; }
		
		//literalLeft=Literal (sign=('<=' | '>=' | '>' | '<' | '=' | '<>') literalRight=Literal)?
		public Group getGroup() { return cGroup; }
		
		//literalLeft=Literal
		public Assignment getLiteralLeftAssignment_0() { return cLiteralLeftAssignment_0; }
		
		//Literal
		public RuleCall getLiteralLeftLiteralParserRuleCall_0_0() { return cLiteralLeftLiteralParserRuleCall_0_0; }
		
		//(sign=('<=' | '>=' | '>' | '<' | '=' | '<>') literalRight=Literal)?
		public Group getGroup_1() { return cGroup_1; }
		
		//sign=('<=' | '>=' | '>' | '<' | '=' | '<>')
		public Assignment getSignAssignment_1_0() { return cSignAssignment_1_0; }
		
		//('<=' | '>=' | '>' | '<' | '=' | '<>')
		public Alternatives getSignAlternatives_1_0_0() { return cSignAlternatives_1_0_0; }
		
		//'<='
		public Keyword getSignLessThanSignEqualsSignKeyword_1_0_0_0() { return cSignLessThanSignEqualsSignKeyword_1_0_0_0; }
		
		//'>='
		public Keyword getSignGreaterThanSignEqualsSignKeyword_1_0_0_1() { return cSignGreaterThanSignEqualsSignKeyword_1_0_0_1; }
		
		//'>'
		public Keyword getSignGreaterThanSignKeyword_1_0_0_2() { return cSignGreaterThanSignKeyword_1_0_0_2; }
		
		//'<'
		public Keyword getSignLessThanSignKeyword_1_0_0_3() { return cSignLessThanSignKeyword_1_0_0_3; }
		
		//'='
		public Keyword getSignEqualsSignKeyword_1_0_0_4() { return cSignEqualsSignKeyword_1_0_0_4; }
		
		//'<>'
		public Keyword getSignLessThanSignGreaterThanSignKeyword_1_0_0_5() { return cSignLessThanSignGreaterThanSignKeyword_1_0_0_5; }
		
		//literalRight=Literal
		public Assignment getLiteralRightAssignment_1_1() { return cLiteralRightAssignment_1_1; }
		
		//Literal
		public RuleCall getLiteralRightLiteralParserRuleCall_1_1_0() { return cLiteralRightLiteralParserRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableQualifiedNameParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cPrimaryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryPrimaryParserRuleCall_1_0 = (RuleCall)cPrimaryAssignment_1.eContents().get(0);
		
		//Literal:
		//	variable=QualifiedName
		//	| primary=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=QualifiedName | primary=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=QualifiedName
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//QualifiedName
		public RuleCall getVariableQualifiedNameParserRuleCall_0_0() { return cVariableQualifiedNameParserRuleCall_0_0; }
		
		//primary=Primary
		public Assignment getPrimaryAssignment_1() { return cPrimaryAssignment_1; }
		
		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_1_0() { return cPrimaryPrimaryParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedName2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.QualifiedName2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName2:
		//	ID ('.' ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class Literal2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Literal2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableQualifiedNameParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cPrimaryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryPrimaryParserRuleCall_1_0 = (RuleCall)cPrimaryAssignment_1.eContents().get(0);
		
		//Literal2:
		//	variable=QualifiedName
		//	| primary=Primary;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=QualifiedName | primary=Primary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variable=QualifiedName
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//QualifiedName
		public RuleCall getVariableQualifiedNameParserRuleCall_0_0() { return cVariableQualifiedNameParserRuleCall_0_0; }
		
		//primary=Primary
		public Assignment getPrimaryAssignment_1() { return cPrimaryAssignment_1; }
		
		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_1_0() { return cPrimaryPrimaryParserRuleCall_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueBooleanAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueBooleanBOOLEANTerminalRuleCall_0_1_0 = (RuleCall)cValueBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueIntegerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntegerINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cValueIntegerAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueFloatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueFloatFLOATTerminalRuleCall_2_1_0 = (RuleCall)cValueFloatAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNullAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueNullAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueNullNULLTerminalRuleCall_4_1_0 = (RuleCall)cValueNullAssignment_4_1.eContents().get(0);
		
		//// Constqnts in BoolExpression
		//Primary:
		//	{Boolean} valueBoolean=BOOLEAN
		//	| {Integer} valueInteger=INTEGER
		//	| {Float} valueFloat=FLOAT
		//	| {String} valueString=STRING
		//	| {Null} valueNull=NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} valueBoolean=BOOLEAN | {Integer} valueInteger=INTEGER | {Float} valueFloat=FLOAT | {String} valueString=STRING
		//| {Null} valueNull=NULL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Boolean} valueBoolean=BOOLEAN
		public Group getGroup_0() { return cGroup_0; }
		
		//{Boolean}
		public Action getBooleanAction_0_0() { return cBooleanAction_0_0; }
		
		//valueBoolean=BOOLEAN
		public Assignment getValueBooleanAssignment_0_1() { return cValueBooleanAssignment_0_1; }
		
		//BOOLEAN
		public RuleCall getValueBooleanBOOLEANTerminalRuleCall_0_1_0() { return cValueBooleanBOOLEANTerminalRuleCall_0_1_0; }
		
		//{Integer} valueInteger=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{Integer}
		public Action getIntegerAction_1_0() { return cIntegerAction_1_0; }
		
		//valueInteger=INTEGER
		public Assignment getValueIntegerAssignment_1_1() { return cValueIntegerAssignment_1_1; }
		
		//INTEGER
		public RuleCall getValueIntegerINTEGERTerminalRuleCall_1_1_0() { return cValueIntegerINTEGERTerminalRuleCall_1_1_0; }
		
		//{Float} valueFloat=FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{Float}
		public Action getFloatAction_2_0() { return cFloatAction_2_0; }
		
		//valueFloat=FLOAT
		public Assignment getValueFloatAssignment_2_1() { return cValueFloatAssignment_2_1; }
		
		//FLOAT
		public RuleCall getValueFloatFLOATTerminalRuleCall_2_1_0() { return cValueFloatFLOATTerminalRuleCall_2_1_0; }
		
		//{String} valueString=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{String}
		public Action getStringAction_3_0() { return cStringAction_3_0; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_3_1() { return cValueStringAssignment_3_1; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_3_1_0() { return cValueStringSTRINGTerminalRuleCall_3_1_0; }
		
		//{Null} valueNull=NULL
		public Group getGroup_4() { return cGroup_4; }
		
		//{Null}
		public Action getNullAction_4_0() { return cNullAction_4_0; }
		
		//valueNull=NULL
		public Assignment getValueNullAssignment_4_1() { return cValueNullAssignment_4_1; }
		
		//NULL
		public RuleCall getValueNullNULLTerminalRuleCall_4_1_0() { return cValueNullNULLTerminalRuleCall_4_1_0; }
	}
	public class OutputExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.OutputExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueBooleanAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueBooleanBOOLEANTerminalRuleCall_0_1_0 = (RuleCall)cValueBooleanAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueIntegerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueIntegerINTEGERTerminalRuleCall_1_1_0 = (RuleCall)cValueIntegerAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueFloatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueFloatFLOATTerminalRuleCall_2_1_0 = (RuleCall)cValueFloatAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueStringAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueStringSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueStringAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cNullAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueNullAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueNullNULLTerminalRuleCall_4_1_0 = (RuleCall)cValueNullAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cDataTypeInstanceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cDataTypeInstanceAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDataTypeInstanceDataTypeInstanceParserRuleCall_5_1_0 = (RuleCall)cDataTypeInstanceAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cDefDataValueAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueDataValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cValueDataValueDefDataValueCrossReference_6_1_0 = (CrossReference)cValueDataValueAssignment_6_1.eContents().get(0);
		private final RuleCall cValueDataValueDefDataValueIDTerminalRuleCall_6_1_0_1 = (RuleCall)cValueDataValueDefDataValueCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cExceptionAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cExceptionKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cValueExceptionAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cValueExceptionSTRINGTerminalRuleCall_7_3_0 = (RuleCall)cValueExceptionAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		
		//OutputExpression:
		//	{Boolean} valueBoolean=BOOLEAN
		//	| {Integer} valueInteger=INTEGER
		//	| {Float} valueFloat=FLOAT
		//	| {String} valueString=STRING
		//	| {Null} valueNull=NULL
		//	| {DataTypeInstance} dataTypeInstance=DataTypeInstance
		//	| {DefDataValue} valueDataValue=[DefDataValue] | {Exception} 'Exception' '(' valueException=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} valueBoolean=BOOLEAN | {Integer} valueInteger=INTEGER | {Float} valueFloat=FLOAT | {String} valueString=STRING
		//| {Null} valueNull=NULL | {DataTypeInstance} dataTypeInstance=DataTypeInstance | {DefDataValue}
		//valueDataValue=[DefDataValue] | {Exception} 'Exception' '(' valueException=STRING ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Boolean} valueBoolean=BOOLEAN
		public Group getGroup_0() { return cGroup_0; }
		
		//{Boolean}
		public Action getBooleanAction_0_0() { return cBooleanAction_0_0; }
		
		//valueBoolean=BOOLEAN
		public Assignment getValueBooleanAssignment_0_1() { return cValueBooleanAssignment_0_1; }
		
		//BOOLEAN
		public RuleCall getValueBooleanBOOLEANTerminalRuleCall_0_1_0() { return cValueBooleanBOOLEANTerminalRuleCall_0_1_0; }
		
		//{Integer} valueInteger=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//{Integer}
		public Action getIntegerAction_1_0() { return cIntegerAction_1_0; }
		
		//valueInteger=INTEGER
		public Assignment getValueIntegerAssignment_1_1() { return cValueIntegerAssignment_1_1; }
		
		//INTEGER
		public RuleCall getValueIntegerINTEGERTerminalRuleCall_1_1_0() { return cValueIntegerINTEGERTerminalRuleCall_1_1_0; }
		
		//{Float} valueFloat=FLOAT
		public Group getGroup_2() { return cGroup_2; }
		
		//{Float}
		public Action getFloatAction_2_0() { return cFloatAction_2_0; }
		
		//valueFloat=FLOAT
		public Assignment getValueFloatAssignment_2_1() { return cValueFloatAssignment_2_1; }
		
		//FLOAT
		public RuleCall getValueFloatFLOATTerminalRuleCall_2_1_0() { return cValueFloatFLOATTerminalRuleCall_2_1_0; }
		
		//{String} valueString=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{String}
		public Action getStringAction_3_0() { return cStringAction_3_0; }
		
		//valueString=STRING
		public Assignment getValueStringAssignment_3_1() { return cValueStringAssignment_3_1; }
		
		//STRING
		public RuleCall getValueStringSTRINGTerminalRuleCall_3_1_0() { return cValueStringSTRINGTerminalRuleCall_3_1_0; }
		
		//{Null} valueNull=NULL
		public Group getGroup_4() { return cGroup_4; }
		
		//{Null}
		public Action getNullAction_4_0() { return cNullAction_4_0; }
		
		//valueNull=NULL
		public Assignment getValueNullAssignment_4_1() { return cValueNullAssignment_4_1; }
		
		//NULL
		public RuleCall getValueNullNULLTerminalRuleCall_4_1_0() { return cValueNullNULLTerminalRuleCall_4_1_0; }
		
		//{DataTypeInstance} dataTypeInstance=DataTypeInstance
		public Group getGroup_5() { return cGroup_5; }
		
		//{DataTypeInstance}
		public Action getDataTypeInstanceAction_5_0() { return cDataTypeInstanceAction_5_0; }
		
		//dataTypeInstance=DataTypeInstance
		public Assignment getDataTypeInstanceAssignment_5_1() { return cDataTypeInstanceAssignment_5_1; }
		
		//DataTypeInstance
		public RuleCall getDataTypeInstanceDataTypeInstanceParserRuleCall_5_1_0() { return cDataTypeInstanceDataTypeInstanceParserRuleCall_5_1_0; }
		
		//{DefDataValue} valueDataValue=[DefDataValue]
		public Group getGroup_6() { return cGroup_6; }
		
		//{DefDataValue}
		public Action getDefDataValueAction_6_0() { return cDefDataValueAction_6_0; }
		
		//valueDataValue=[DefDataValue]
		public Assignment getValueDataValueAssignment_6_1() { return cValueDataValueAssignment_6_1; }
		
		//[DefDataValue]
		public CrossReference getValueDataValueDefDataValueCrossReference_6_1_0() { return cValueDataValueDefDataValueCrossReference_6_1_0; }
		
		//ID
		public RuleCall getValueDataValueDefDataValueIDTerminalRuleCall_6_1_0_1() { return cValueDataValueDefDataValueIDTerminalRuleCall_6_1_0_1; }
		
		//{Exception} 'Exception' '(' valueException=STRING ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Exception}
		public Action getExceptionAction_7_0() { return cExceptionAction_7_0; }
		
		//'Exception'
		public Keyword getExceptionKeyword_7_1() { return cExceptionKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//valueException=STRING
		public Assignment getValueExceptionAssignment_7_3() { return cValueExceptionAssignment_7_3; }
		
		//STRING
		public RuleCall getValueExceptionSTRINGTerminalRuleCall_7_3_0() { return cValueExceptionSTRINGTerminalRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
	}
	public class DefTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DefTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefFuncDefFunctionCrossReference_3_0 = (CrossReference)cDefFuncAssignment_3.eContents().get(0);
		private final RuleCall cDefFuncDefFunctionQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefFuncDefFunctionCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cDataTypeValuesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cDataTypeValuesDataTypeValueParserRuleCall_5_0_0 = (RuleCall)cDataTypeValuesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cDataTypeValuesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cDataTypeValuesDataTypeValueParserRuleCall_5_1_1_0 = (RuleCall)cDataTypeValuesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutputExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutputExpressionOutputExpressionParserRuleCall_8_0 = (RuleCall)cOutputExpressionAssignment_8.eContents().get(0);
		
		//DefTest:
		//	'test' name=ID '=' defFunc=[DefFunction|QualifiedName] '(' (dataTypeValues+=DataTypeValue (','
		//	dataTypeValues+=DataTypeValue)*)? ')' ':' outputExpression=OutputExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID '=' defFunc=[DefFunction|QualifiedName] '(' (dataTypeValues+=DataTypeValue (','
		//dataTypeValues+=DataTypeValue)*)? ')' ':' outputExpression=OutputExpression
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//defFunc=[DefFunction|QualifiedName]
		public Assignment getDefFuncAssignment_3() { return cDefFuncAssignment_3; }
		
		//[DefFunction|QualifiedName]
		public CrossReference getDefFuncDefFunctionCrossReference_3_0() { return cDefFuncDefFunctionCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getDefFuncDefFunctionQualifiedNameParserRuleCall_3_0_1() { return cDefFuncDefFunctionQualifiedNameParserRuleCall_3_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(dataTypeValues+=DataTypeValue (',' dataTypeValues+=DataTypeValue)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//dataTypeValues+=DataTypeValue
		public Assignment getDataTypeValuesAssignment_5_0() { return cDataTypeValuesAssignment_5_0; }
		
		//DataTypeValue
		public RuleCall getDataTypeValuesDataTypeValueParserRuleCall_5_0_0() { return cDataTypeValuesDataTypeValueParserRuleCall_5_0_0; }
		
		//(',' dataTypeValues+=DataTypeValue)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//dataTypeValues+=DataTypeValue
		public Assignment getDataTypeValuesAssignment_5_1_1() { return cDataTypeValuesAssignment_5_1_1; }
		
		//DataTypeValue
		public RuleCall getDataTypeValuesDataTypeValueParserRuleCall_5_1_1_0() { return cDataTypeValuesDataTypeValueParserRuleCall_5_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//outputExpression=OutputExpression
		public Assignment getOutputExpressionAssignment_8() { return cOutputExpressionAssignment_8; }
		
		//OutputExpression
		public RuleCall getOutputExpressionOutputExpressionParserRuleCall_8_0() { return cOutputExpressionOutputExpressionParserRuleCall_8_0; }
	}
	public class DataTypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.DataTypeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPrimaryAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPrimaryPrimaryParserRuleCall_0_0 = (RuleCall)cPrimaryAssignment_0.eContents().get(0);
		private final Assignment cDataTypeInstanceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeInstanceDataTypeInstanceParserRuleCall_1_0 = (RuleCall)cDataTypeInstanceAssignment_1.eContents().get(0);
		private final Assignment cDefDataValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cDefDataValueDefDataValueCrossReference_2_0 = (CrossReference)cDefDataValueAssignment_2.eContents().get(0);
		private final RuleCall cDefDataValueDefDataValueIDTerminalRuleCall_2_0_1 = (RuleCall)cDefDataValueDefDataValueCrossReference_2_0.eContents().get(1);
		
		//DataTypeValue:
		//	primary=Primary
		//	| dataTypeInstance=DataTypeInstance
		//	| defDataValue=[DefDataValue];
		@Override public ParserRule getRule() { return rule; }
		
		//primary=Primary | dataTypeInstance=DataTypeInstance | defDataValue=[DefDataValue]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primary=Primary
		public Assignment getPrimaryAssignment_0() { return cPrimaryAssignment_0; }
		
		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_0_0() { return cPrimaryPrimaryParserRuleCall_0_0; }
		
		//dataTypeInstance=DataTypeInstance
		public Assignment getDataTypeInstanceAssignment_1() { return cDataTypeInstanceAssignment_1; }
		
		//DataTypeInstance
		public RuleCall getDataTypeInstanceDataTypeInstanceParserRuleCall_1_0() { return cDataTypeInstanceDataTypeInstanceParserRuleCall_1_0; }
		
		//defDataValue=[DefDataValue]
		public Assignment getDefDataValueAssignment_2() { return cDefDataValueAssignment_2; }
		
		//[DefDataValue]
		public CrossReference getDefDataValueDefDataValueCrossReference_2_0() { return cDefDataValueDefDataValueCrossReference_2_0; }
		
		//ID
		public RuleCall getDefDataValueDefDataValueIDTerminalRuleCall_2_0_1() { return cDefDataValueDefDataValueIDTerminalRuleCall_2_0_1; }
	}
	
	public class PrimitivesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.Primitives");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBoolKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLOPTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLOPTBoolOptKeyword_1_0 = (Keyword)cBOOLOPTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTOPTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTOPTIntOptKeyword_3_0 = (Keyword)cINTOPTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATOPTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFLOATOPTFloatOptKeyword_5_0 = (Keyword)cFLOATOPTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTRINGStringKeyword_6_0 = (Keyword)cSTRINGEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGOPTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSTRINGOPTStringOptKeyword_7_0 = (Keyword)cSTRINGOPTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cEXCEPTIONEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cEXCEPTIONExceptionKeyword_8_0 = (Keyword)cEXCEPTIONEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNULLNothingKeyword_9_0 = (Keyword)cNULLEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Primitives:
		//	BOOL='bool'
		//	| BOOLOPT='boolOpt'
		//	| INT='int'
		//	| INTOPT='intOpt'
		//	| FLOAT='float'
		//	| FLOATOPT='floatOpt'
		//	| STRING='string'
		//	| STRINGOPT='stringOpt'
		//	| EXCEPTION='exception'
		//	| NULL='Nothing';
		public EnumRule getRule() { return rule; }
		
		//BOOL='bool' | BOOLOPT='boolOpt' | INT='int' | INTOPT='intOpt' | FLOAT='float' | FLOATOPT='floatOpt' | STRING='string' |
		//STRINGOPT='stringOpt' | EXCEPTION='exception' | NULL='Nothing'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BOOL='bool'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }
		
		//'bool'
		public Keyword getBOOLBoolKeyword_0_0() { return cBOOLBoolKeyword_0_0; }
		
		//BOOLOPT='boolOpt'
		public EnumLiteralDeclaration getBOOLOPTEnumLiteralDeclaration_1() { return cBOOLOPTEnumLiteralDeclaration_1; }
		
		//'boolOpt'
		public Keyword getBOOLOPTBoolOptKeyword_1_0() { return cBOOLOPTBoolOptKeyword_1_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//'int'
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//INTOPT='intOpt'
		public EnumLiteralDeclaration getINTOPTEnumLiteralDeclaration_3() { return cINTOPTEnumLiteralDeclaration_3; }
		
		//'intOpt'
		public Keyword getINTOPTIntOptKeyword_3_0() { return cINTOPTIntOptKeyword_3_0; }
		
		//FLOAT='float'
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }
		
		//'float'
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }
		
		//FLOATOPT='floatOpt'
		public EnumLiteralDeclaration getFLOATOPTEnumLiteralDeclaration_5() { return cFLOATOPTEnumLiteralDeclaration_5; }
		
		//'floatOpt'
		public Keyword getFLOATOPTFloatOptKeyword_5_0() { return cFLOATOPTFloatOptKeyword_5_0; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_6() { return cSTRINGEnumLiteralDeclaration_6; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_6_0() { return cSTRINGStringKeyword_6_0; }
		
		//STRINGOPT='stringOpt'
		public EnumLiteralDeclaration getSTRINGOPTEnumLiteralDeclaration_7() { return cSTRINGOPTEnumLiteralDeclaration_7; }
		
		//'stringOpt'
		public Keyword getSTRINGOPTStringOptKeyword_7_0() { return cSTRINGOPTStringOptKeyword_7_0; }
		
		//EXCEPTION='exception'
		public EnumLiteralDeclaration getEXCEPTIONEnumLiteralDeclaration_8() { return cEXCEPTIONEnumLiteralDeclaration_8; }
		
		//'exception'
		public Keyword getEXCEPTIONExceptionKeyword_8_0() { return cEXCEPTIONExceptionKeyword_8_0; }
		
		//NULL='Nothing'
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_9() { return cNULLEnumLiteralDeclaration_9; }
		
		//'Nothing'
		public Keyword getNULLNothingKeyword_9_0() { return cNULLNothingKeyword_9_0; }
	}
	
	private final ModelElements pModel;
	private final DefImportElements pDefImport;
	private final DefDataTypeElements pDefDataType;
	private final DefDataValueElements pDefDataValue;
	private final DataTypeInstanceElements pDataTypeInstance;
	private final DefFunctionElements pDefFunction;
	private final InputParamElements pInputParam;
	private final DataTypeElements pDataType;
	private final FunctionBodyElements pFunctionBody;
	private final StatementElements pStatement;
	private final IfStatementElements pIfStatement;
	private final ExpOrIfStatementElements pExpOrIfStatement;
	private final BoolExpressionElements pBoolExpression;
	private final LiteralElements pLiteral;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedName2Elements pQualifiedName2;
	private final Literal2Elements pLiteral2;
	private final PrimaryElements pPrimary;
	private final OutputExpressionElements pOutputExpression;
	private final DefTestElements pDefTest;
	private final DataTypeValueElements pDataTypeValue;
	private final PrimitivesElements ePrimitives;
	private final TerminalRule tNULL;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tINTEGER;
	private final TerminalRule tFLOAT;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public ItlDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pDefImport = new DefImportElements();
		this.pDefDataType = new DefDataTypeElements();
		this.pDefDataValue = new DefDataValueElements();
		this.pDataTypeInstance = new DataTypeInstanceElements();
		this.pDefFunction = new DefFunctionElements();
		this.pInputParam = new InputParamElements();
		this.pDataType = new DataTypeElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pStatement = new StatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pExpOrIfStatement = new ExpOrIfStatementElements();
		this.pBoolExpression = new BoolExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedName2 = new QualifiedName2Elements();
		this.pLiteral2 = new Literal2Elements();
		this.pPrimary = new PrimaryElements();
		this.pOutputExpression = new OutputExpressionElements();
		this.pDefTest = new DefTestElements();
		this.pDataTypeValue = new DataTypeValueElements();
		this.ePrimitives = new PrimitivesElements();
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.NULL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.BOOLEAN");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.INTEGER");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.FLOAT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.aestheticintegration.atto.ItlDsl.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.aestheticintegration.atto.ItlDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	imports+=DefImport*
	//	datatypes+=DefDataType*
	//	datavalues+=DefDataValue*
	//	functions+=DefFunction*
	//	tests+=DefTest*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//DefImport:
	//	'import' name=QualifiedName;
	public DefImportElements getDefImportAccess() {
		return pDefImport;
	}
	
	public ParserRule getDefImportRule() {
		return getDefImportAccess().getRule();
	}
	
	//DefDataType:
	//	'datatype' name=ID '{' fields+=InputParam* '}';
	public DefDataTypeElements getDefDataTypeAccess() {
		return pDefDataType;
	}
	
	public ParserRule getDefDataTypeRule() {
		return getDefDataTypeAccess().getRule();
	}
	
	//DefDataValue:
	//	'datavalue' name=ID '=' dataTypeInstance=DataTypeInstance;
	public DefDataValueElements getDefDataValueAccess() {
		return pDefDataValue;
	}
	
	public ParserRule getDefDataValueRule() {
		return getDefDataValueAccess().getRule();
	}
	
	//DataTypeInstance:
	//	defDataType=[DefDataType] '(' (literals+=Literal (',' literals+=Literal)*)* ')';
	public DataTypeInstanceElements getDataTypeInstanceAccess() {
		return pDataTypeInstance;
	}
	
	public ParserRule getDataTypeInstanceRule() {
		return getDataTypeInstanceAccess().getRule();
	}
	
	//DefFunction:
	//	'function' name=QualifiedName2 '(' (inputParams+=InputParam (',' inputParams+=InputParam)*)? ')' ':'
	//	outputDataType=DataType '{'
	//	functionBody=FunctionBody
	//	'}';
	public DefFunctionElements getDefFunctionAccess() {
		return pDefFunction;
	}
	
	public ParserRule getDefFunctionRule() {
		return getDefFunctionAccess().getRule();
	}
	
	////ClassName:
	////	'className' className=ID ('.' ID)*
	////;
	//InputParam:
	//	name=ID ':' inputDataType=DataType;
	public InputParamElements getInputParamAccess() {
		return pInputParam;
	}
	
	public ParserRule getInputParamRule() {
		return getInputParamAccess().getRule();
	}
	
	//DataType:
	//	boolean='boolean'
	//	| booleanObj='Boolean' // Primitive DataType
	//	//|	BYTE='byte'
	//	//|	BYTEOBJ='Byte'
	//	//|	CHAR='char'
	//	//|	CHARACTER='Character'
	//
	//	| short='short'
	//	| shortObj='Short'
	//	| int='int'
	//	| intObj='Integer' // Primitive DataType
	//	| long='long'
	//	| longObj='Long'
	//	| float='float'
	//	| floatObj='Float' // Primitive DataType
	//	| double='double'
	//	| doubleObj='Double'
	//	| string='String' // Primitive DataType
	//
	//	| defDataType=[DefDataType];
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//FunctionBody:
	//	{FunctionBody} statement+=Statement*;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//Statement:
	//	ifStatement=IfStatement
	//	| outputExpression=OutputExpression;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' inputBoolExpression+=BoolExpression (sign+=('&&' | '||') inputBoolExpression+=BoolExpression)* ')'
	//	'then' thenExpOrIfStatement=ExpOrIfStatement
	//	'else' elseExpOrIfStatement=ExpOrIfStatement
	//	'endif';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ExpOrIfStatement:
	//	outputExpression=OutputExpression
	//	| ifStatement=IfStatement;
	public ExpOrIfStatementElements getExpOrIfStatementAccess() {
		return pExpOrIfStatement;
	}
	
	public ParserRule getExpOrIfStatementRule() {
		return getExpOrIfStatementAccess().getRule();
	}
	
	//BoolExpression:
	//	literalLeft=Literal (sign=('<=' | '>=' | '>' | '<' | '=' | '<>') literalRight=Literal)?;
	public BoolExpressionElements getBoolExpressionAccess() {
		return pBoolExpression;
	}
	
	public ParserRule getBoolExpressionRule() {
		return getBoolExpressionAccess().getRule();
	}
	
	//Literal:
	//	variable=QualifiedName
	//	| primary=Primary;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedName2:
	//	ID ('.' ID)+;
	public QualifiedName2Elements getQualifiedName2Access() {
		return pQualifiedName2;
	}
	
	public ParserRule getQualifiedName2Rule() {
		return getQualifiedName2Access().getRule();
	}
	
	//Literal2:
	//	variable=QualifiedName
	//	| primary=Primary;
	public Literal2Elements getLiteral2Access() {
		return pLiteral2;
	}
	
	public ParserRule getLiteral2Rule() {
		return getLiteral2Access().getRule();
	}
	
	//// Constqnts in BoolExpression
	//Primary:
	//	{Boolean} valueBoolean=BOOLEAN
	//	| {Integer} valueInteger=INTEGER
	//	| {Float} valueFloat=FLOAT
	//	| {String} valueString=STRING
	//	| {Null} valueNull=NULL;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//OutputExpression:
	//	{Boolean} valueBoolean=BOOLEAN
	//	| {Integer} valueInteger=INTEGER
	//	| {Float} valueFloat=FLOAT
	//	| {String} valueString=STRING
	//	| {Null} valueNull=NULL
	//	| {DataTypeInstance} dataTypeInstance=DataTypeInstance
	//	| {DefDataValue} valueDataValue=[DefDataValue] | {Exception} 'Exception' '(' valueException=STRING ')';
	public OutputExpressionElements getOutputExpressionAccess() {
		return pOutputExpression;
	}
	
	public ParserRule getOutputExpressionRule() {
		return getOutputExpressionAccess().getRule();
	}
	
	//DefTest:
	//	'test' name=ID '=' defFunc=[DefFunction|QualifiedName] '(' (dataTypeValues+=DataTypeValue (','
	//	dataTypeValues+=DataTypeValue)*)? ')' ':' outputExpression=OutputExpression;
	public DefTestElements getDefTestAccess() {
		return pDefTest;
	}
	
	public ParserRule getDefTestRule() {
		return getDefTestAccess().getRule();
	}
	
	//DataTypeValue:
	//	primary=Primary
	//	| dataTypeInstance=DataTypeInstance
	//	| defDataValue=[DefDataValue];
	public DataTypeValueElements getDataTypeValueAccess() {
		return pDataTypeValue;
	}
	
	public ParserRule getDataTypeValueRule() {
		return getDataTypeValueAccess().getRule();
	}
	
	//enum Primitives:
	//	BOOL='bool'
	//	| BOOLOPT='boolOpt'
	//	| INT='int'
	//	| INTOPT='intOpt'
	//	| FLOAT='float'
	//	| FLOATOPT='floatOpt'
	//	| STRING='string'
	//	| STRINGOPT='stringOpt'
	//	| EXCEPTION='exception'
	//	| NULL='Nothing';
	public PrimitivesElements getPrimitivesAccess() {
		return ePrimitives;
	}
	
	public EnumRule getPrimitivesRule() {
		return getPrimitivesAccess().getRule();
	}
	
	//terminal NULL:
	//	'null' | 'NULL';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//	'false' | 'true';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal INTEGER returns ecore::EIntegerObject:
	//	'0'..'9'+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal FLOAT returns ecore::EFloatObject:
	//	'0'..'9'+ '.' | '.' '0'..'9'+ | '0'..'9'+ '.' '0'..'9'+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'
	//	//|	"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
