/**
 * generated by Xtext 2.12.0
 */
package com.aestheticintegration.atto.itlDsl.impl;

import com.aestheticintegration.atto.itlDsl.BoolExpression;
import com.aestheticintegration.atto.itlDsl.ExpOrIfStatement;
import com.aestheticintegration.atto.itlDsl.IfStatement;
import com.aestheticintegration.atto.itlDsl.ItlDslPackage;

import java.lang.String;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aestheticintegration.atto.itlDsl.impl.IfStatementImpl#getInputBoolExpression <em>Input Bool Expression</em>}</li>
 *   <li>{@link com.aestheticintegration.atto.itlDsl.impl.IfStatementImpl#getSign <em>Sign</em>}</li>
 *   <li>{@link com.aestheticintegration.atto.itlDsl.impl.IfStatementImpl#getThenExpOrIfStatement <em>Then Exp Or If Statement</em>}</li>
 *   <li>{@link com.aestheticintegration.atto.itlDsl.impl.IfStatementImpl#getElseExpOrIfStatement <em>Else Exp Or If Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfStatementImpl extends MinimalEObjectImpl.Container implements IfStatement
{
  /**
   * The cached value of the '{@link #getInputBoolExpression() <em>Input Bool Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInputBoolExpression()
   * @generated
   * @ordered
   */
  protected EList<BoolExpression> inputBoolExpression;

  /**
   * The cached value of the '{@link #getSign() <em>Sign</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSign()
   * @generated
   * @ordered
   */
  protected EList<String> sign;

  /**
   * The cached value of the '{@link #getThenExpOrIfStatement() <em>Then Exp Or If Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenExpOrIfStatement()
   * @generated
   * @ordered
   */
  protected ExpOrIfStatement thenExpOrIfStatement;

  /**
   * The cached value of the '{@link #getElseExpOrIfStatement() <em>Else Exp Or If Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseExpOrIfStatement()
   * @generated
   * @ordered
   */
  protected ExpOrIfStatement elseExpOrIfStatement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ItlDslPackage.Literals.IF_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<BoolExpression> getInputBoolExpression()
  {
    if (inputBoolExpression == null)
    {
      inputBoolExpression = new EObjectContainmentEList<BoolExpression>(BoolExpression.class, this, ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION);
    }
    return inputBoolExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getSign()
  {
    if (sign == null)
    {
      sign = new EDataTypeEList<String>(String.class, this, ItlDslPackage.IF_STATEMENT__SIGN);
    }
    return sign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpOrIfStatement getThenExpOrIfStatement()
  {
    return thenExpOrIfStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenExpOrIfStatement(ExpOrIfStatement newThenExpOrIfStatement, NotificationChain msgs)
  {
    ExpOrIfStatement oldThenExpOrIfStatement = thenExpOrIfStatement;
    thenExpOrIfStatement = newThenExpOrIfStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT, oldThenExpOrIfStatement, newThenExpOrIfStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setThenExpOrIfStatement(ExpOrIfStatement newThenExpOrIfStatement)
  {
    if (newThenExpOrIfStatement != thenExpOrIfStatement)
    {
      NotificationChain msgs = null;
      if (thenExpOrIfStatement != null)
        msgs = ((InternalEObject)thenExpOrIfStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT, null, msgs);
      if (newThenExpOrIfStatement != null)
        msgs = ((InternalEObject)newThenExpOrIfStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT, null, msgs);
      msgs = basicSetThenExpOrIfStatement(newThenExpOrIfStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT, newThenExpOrIfStatement, newThenExpOrIfStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpOrIfStatement getElseExpOrIfStatement()
  {
    return elseExpOrIfStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseExpOrIfStatement(ExpOrIfStatement newElseExpOrIfStatement, NotificationChain msgs)
  {
    ExpOrIfStatement oldElseExpOrIfStatement = elseExpOrIfStatement;
    elseExpOrIfStatement = newElseExpOrIfStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT, oldElseExpOrIfStatement, newElseExpOrIfStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElseExpOrIfStatement(ExpOrIfStatement newElseExpOrIfStatement)
  {
    if (newElseExpOrIfStatement != elseExpOrIfStatement)
    {
      NotificationChain msgs = null;
      if (elseExpOrIfStatement != null)
        msgs = ((InternalEObject)elseExpOrIfStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT, null, msgs);
      if (newElseExpOrIfStatement != null)
        msgs = ((InternalEObject)newElseExpOrIfStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT, null, msgs);
      msgs = basicSetElseExpOrIfStatement(newElseExpOrIfStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT, newElseExpOrIfStatement, newElseExpOrIfStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION:
        return ((InternalEList<?>)getInputBoolExpression()).basicRemove(otherEnd, msgs);
      case ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT:
        return basicSetThenExpOrIfStatement(null, msgs);
      case ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT:
        return basicSetElseExpOrIfStatement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION:
        return getInputBoolExpression();
      case ItlDslPackage.IF_STATEMENT__SIGN:
        return getSign();
      case ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT:
        return getThenExpOrIfStatement();
      case ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT:
        return getElseExpOrIfStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION:
        getInputBoolExpression().clear();
        getInputBoolExpression().addAll((Collection<? extends BoolExpression>)newValue);
        return;
      case ItlDslPackage.IF_STATEMENT__SIGN:
        getSign().clear();
        getSign().addAll((Collection<? extends String>)newValue);
        return;
      case ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT:
        setThenExpOrIfStatement((ExpOrIfStatement)newValue);
        return;
      case ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT:
        setElseExpOrIfStatement((ExpOrIfStatement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION:
        getInputBoolExpression().clear();
        return;
      case ItlDslPackage.IF_STATEMENT__SIGN:
        getSign().clear();
        return;
      case ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT:
        setThenExpOrIfStatement((ExpOrIfStatement)null);
        return;
      case ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT:
        setElseExpOrIfStatement((ExpOrIfStatement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ItlDslPackage.IF_STATEMENT__INPUT_BOOL_EXPRESSION:
        return inputBoolExpression != null && !inputBoolExpression.isEmpty();
      case ItlDslPackage.IF_STATEMENT__SIGN:
        return sign != null && !sign.isEmpty();
      case ItlDslPackage.IF_STATEMENT__THEN_EXP_OR_IF_STATEMENT:
        return thenExpOrIfStatement != null;
      case ItlDslPackage.IF_STATEMENT__ELSE_EXP_OR_IF_STATEMENT:
        return elseExpOrIfStatement != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (sign: ");
    result.append(sign);
    result.append(')');
    return result.toString();
  }

} //IfStatementImpl
