/*
 * generated by Xtext 2.12.0
 */
package com.aestheticintegration.atto.ide.contentassist.antlr;

import com.aestheticintegration.atto.ide.contentassist.antlr.internal.InternalItlDslParser;
import com.aestheticintegration.atto.services.ItlDslGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ItlDslParser extends AbstractContentAssistParser {

	@Inject
	private ItlDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalItlDslParser createParser() {
		InternalItlDslParser result = new InternalItlDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getIfStatementAccess().getSignAlternatives_3_0_0(), "rule__IfStatement__SignAlternatives_3_0_0");
					put(grammarAccess.getExpOrIfStatementAccess().getAlternatives(), "rule__ExpOrIfStatement__Alternatives");
					put(grammarAccess.getBoolExpressionAccess().getSignAlternatives_1_0_0(), "rule__BoolExpression__SignAlternatives_1_0_0");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getLiteral2Access().getAlternatives(), "rule__Literal2__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getOutputExpressionAccess().getAlternatives(), "rule__OutputExpression__Alternatives");
					put(grammarAccess.getDataTypeValueAccess().getAlternatives(), "rule__DataTypeValue__Alternatives");
					put(grammarAccess.getPrimitivesAccess().getAlternatives(), "rule__Primitives__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDefImportAccess().getGroup(), "rule__DefImport__Group__0");
					put(grammarAccess.getDefDataTypeAccess().getGroup(), "rule__DefDataType__Group__0");
					put(grammarAccess.getDefDataValueAccess().getGroup(), "rule__DefDataValue__Group__0");
					put(grammarAccess.getDataTypeInstanceAccess().getGroup(), "rule__DataTypeInstance__Group__0");
					put(grammarAccess.getDataTypeInstanceAccess().getGroup_2(), "rule__DataTypeInstance__Group_2__0");
					put(grammarAccess.getDataTypeInstanceAccess().getGroup_2_1(), "rule__DataTypeInstance__Group_2_1__0");
					put(grammarAccess.getDefFunctionAccess().getGroup(), "rule__DefFunction__Group__0");
					put(grammarAccess.getDefFunctionAccess().getGroup_3(), "rule__DefFunction__Group_3__0");
					put(grammarAccess.getDefFunctionAccess().getGroup_3_1(), "rule__DefFunction__Group_3_1__0");
					put(grammarAccess.getInputParamAccess().getGroup(), "rule__InputParam__Group__0");
					put(grammarAccess.getFunctionBodyAccess().getGroup(), "rule__FunctionBody__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
					put(grammarAccess.getBoolExpressionAccess().getGroup(), "rule__BoolExpression__Group__0");
					put(grammarAccess.getBoolExpressionAccess().getGroup_1(), "rule__BoolExpression__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedName2Access().getGroup(), "rule__QualifiedName2__Group__0");
					put(grammarAccess.getQualifiedName2Access().getGroup_1(), "rule__QualifiedName2__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
					put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
					put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_0(), "rule__OutputExpression__Group_0__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_1(), "rule__OutputExpression__Group_1__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_2(), "rule__OutputExpression__Group_2__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_3(), "rule__OutputExpression__Group_3__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_4(), "rule__OutputExpression__Group_4__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_5(), "rule__OutputExpression__Group_5__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_6(), "rule__OutputExpression__Group_6__0");
					put(grammarAccess.getOutputExpressionAccess().getGroup_7(), "rule__OutputExpression__Group_7__0");
					put(grammarAccess.getDefTestAccess().getGroup(), "rule__DefTest__Group__0");
					put(grammarAccess.getDefTestAccess().getGroup_5(), "rule__DefTest__Group_5__0");
					put(grammarAccess.getDefTestAccess().getGroup_5_1(), "rule__DefTest__Group_5_1__0");
					put(grammarAccess.getModelAccess().getImportsAssignment_0(), "rule__Model__ImportsAssignment_0");
					put(grammarAccess.getModelAccess().getDatatypesAssignment_1(), "rule__Model__DatatypesAssignment_1");
					put(grammarAccess.getModelAccess().getDatavaluesAssignment_2(), "rule__Model__DatavaluesAssignment_2");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_3(), "rule__Model__FunctionsAssignment_3");
					put(grammarAccess.getModelAccess().getTestsAssignment_4(), "rule__Model__TestsAssignment_4");
					put(grammarAccess.getDefImportAccess().getNameAssignment_1(), "rule__DefImport__NameAssignment_1");
					put(grammarAccess.getDefDataTypeAccess().getNameAssignment_1(), "rule__DefDataType__NameAssignment_1");
					put(grammarAccess.getDefDataTypeAccess().getFieldsAssignment_3(), "rule__DefDataType__FieldsAssignment_3");
					put(grammarAccess.getDefDataValueAccess().getNameAssignment_1(), "rule__DefDataValue__NameAssignment_1");
					put(grammarAccess.getDefDataValueAccess().getDataTypeInstanceAssignment_3(), "rule__DefDataValue__DataTypeInstanceAssignment_3");
					put(grammarAccess.getDataTypeInstanceAccess().getDefDataTypeAssignment_0(), "rule__DataTypeInstance__DefDataTypeAssignment_0");
					put(grammarAccess.getDataTypeInstanceAccess().getLiteralsAssignment_2_0(), "rule__DataTypeInstance__LiteralsAssignment_2_0");
					put(grammarAccess.getDataTypeInstanceAccess().getLiteralsAssignment_2_1_1(), "rule__DataTypeInstance__LiteralsAssignment_2_1_1");
					put(grammarAccess.getDefFunctionAccess().getNameAssignment_1(), "rule__DefFunction__NameAssignment_1");
					put(grammarAccess.getDefFunctionAccess().getInputParamsAssignment_3_0(), "rule__DefFunction__InputParamsAssignment_3_0");
					put(grammarAccess.getDefFunctionAccess().getInputParamsAssignment_3_1_1(), "rule__DefFunction__InputParamsAssignment_3_1_1");
					put(grammarAccess.getDefFunctionAccess().getOutputDataTypeAssignment_6(), "rule__DefFunction__OutputDataTypeAssignment_6");
					put(grammarAccess.getDefFunctionAccess().getFunctionBodyAssignment_8(), "rule__DefFunction__FunctionBodyAssignment_8");
					put(grammarAccess.getInputParamAccess().getNameAssignment_0(), "rule__InputParam__NameAssignment_0");
					put(grammarAccess.getInputParamAccess().getInputDataTypeAssignment_2(), "rule__InputParam__InputDataTypeAssignment_2");
					put(grammarAccess.getDataTypeAccess().getBooleanAssignment_0(), "rule__DataType__BooleanAssignment_0");
					put(grammarAccess.getDataTypeAccess().getBooleanObjAssignment_1(), "rule__DataType__BooleanObjAssignment_1");
					put(grammarAccess.getDataTypeAccess().getShortAssignment_2(), "rule__DataType__ShortAssignment_2");
					put(grammarAccess.getDataTypeAccess().getShortObjAssignment_3(), "rule__DataType__ShortObjAssignment_3");
					put(grammarAccess.getDataTypeAccess().getIntAssignment_4(), "rule__DataType__IntAssignment_4");
					put(grammarAccess.getDataTypeAccess().getIntObjAssignment_5(), "rule__DataType__IntObjAssignment_5");
					put(grammarAccess.getDataTypeAccess().getLongAssignment_6(), "rule__DataType__LongAssignment_6");
					put(grammarAccess.getDataTypeAccess().getLongObjAssignment_7(), "rule__DataType__LongObjAssignment_7");
					put(grammarAccess.getDataTypeAccess().getFloatAssignment_8(), "rule__DataType__FloatAssignment_8");
					put(grammarAccess.getDataTypeAccess().getFloatObjAssignment_9(), "rule__DataType__FloatObjAssignment_9");
					put(grammarAccess.getDataTypeAccess().getDoubleAssignment_10(), "rule__DataType__DoubleAssignment_10");
					put(grammarAccess.getDataTypeAccess().getDoubleObjAssignment_11(), "rule__DataType__DoubleObjAssignment_11");
					put(grammarAccess.getDataTypeAccess().getStringAssignment_12(), "rule__DataType__StringAssignment_12");
					put(grammarAccess.getDataTypeAccess().getDefDataTypeAssignment_13(), "rule__DataType__DefDataTypeAssignment_13");
					put(grammarAccess.getFunctionBodyAccess().getStatementAssignment_1(), "rule__FunctionBody__StatementAssignment_1");
					put(grammarAccess.getStatementAccess().getIfStatementAssignment_0(), "rule__Statement__IfStatementAssignment_0");
					put(grammarAccess.getStatementAccess().getOutputExpressionAssignment_1(), "rule__Statement__OutputExpressionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getInputBoolExpressionAssignment_2(), "rule__IfStatement__InputBoolExpressionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getSignAssignment_3_0(), "rule__IfStatement__SignAssignment_3_0");
					put(grammarAccess.getIfStatementAccess().getInputBoolExpressionAssignment_3_1(), "rule__IfStatement__InputBoolExpressionAssignment_3_1");
					put(grammarAccess.getIfStatementAccess().getThenExpOrIfStatementAssignment_6(), "rule__IfStatement__ThenExpOrIfStatementAssignment_6");
					put(grammarAccess.getIfStatementAccess().getElseExpOrIfStatementAssignment_8(), "rule__IfStatement__ElseExpOrIfStatementAssignment_8");
					put(grammarAccess.getExpOrIfStatementAccess().getOutputExpressionAssignment_0(), "rule__ExpOrIfStatement__OutputExpressionAssignment_0");
					put(grammarAccess.getExpOrIfStatementAccess().getIfStatementAssignment_1(), "rule__ExpOrIfStatement__IfStatementAssignment_1");
					put(grammarAccess.getBoolExpressionAccess().getLiteralLeftAssignment_0(), "rule__BoolExpression__LiteralLeftAssignment_0");
					put(grammarAccess.getBoolExpressionAccess().getSignAssignment_1_0(), "rule__BoolExpression__SignAssignment_1_0");
					put(grammarAccess.getBoolExpressionAccess().getLiteralRightAssignment_1_1(), "rule__BoolExpression__LiteralRightAssignment_1_1");
					put(grammarAccess.getLiteralAccess().getVariableAssignment_0(), "rule__Literal__VariableAssignment_0");
					put(grammarAccess.getLiteralAccess().getPrimaryAssignment_1(), "rule__Literal__PrimaryAssignment_1");
					put(grammarAccess.getLiteral2Access().getVariableAssignment_0(), "rule__Literal2__VariableAssignment_0");
					put(grammarAccess.getLiteral2Access().getPrimaryAssignment_1(), "rule__Literal2__PrimaryAssignment_1");
					put(grammarAccess.getPrimaryAccess().getValueBooleanAssignment_0_1(), "rule__Primary__ValueBooleanAssignment_0_1");
					put(grammarAccess.getPrimaryAccess().getValueIntegerAssignment_1_1(), "rule__Primary__ValueIntegerAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getValueFloatAssignment_2_1(), "rule__Primary__ValueFloatAssignment_2_1");
					put(grammarAccess.getPrimaryAccess().getValueStringAssignment_3_1(), "rule__Primary__ValueStringAssignment_3_1");
					put(grammarAccess.getPrimaryAccess().getValueNullAssignment_4_1(), "rule__Primary__ValueNullAssignment_4_1");
					put(grammarAccess.getOutputExpressionAccess().getValueBooleanAssignment_0_1(), "rule__OutputExpression__ValueBooleanAssignment_0_1");
					put(grammarAccess.getOutputExpressionAccess().getValueIntegerAssignment_1_1(), "rule__OutputExpression__ValueIntegerAssignment_1_1");
					put(grammarAccess.getOutputExpressionAccess().getValueFloatAssignment_2_1(), "rule__OutputExpression__ValueFloatAssignment_2_1");
					put(grammarAccess.getOutputExpressionAccess().getValueStringAssignment_3_1(), "rule__OutputExpression__ValueStringAssignment_3_1");
					put(grammarAccess.getOutputExpressionAccess().getValueNullAssignment_4_1(), "rule__OutputExpression__ValueNullAssignment_4_1");
					put(grammarAccess.getOutputExpressionAccess().getDataTypeInstanceAssignment_5_1(), "rule__OutputExpression__DataTypeInstanceAssignment_5_1");
					put(grammarAccess.getOutputExpressionAccess().getValueDataValueAssignment_6_1(), "rule__OutputExpression__ValueDataValueAssignment_6_1");
					put(grammarAccess.getOutputExpressionAccess().getValueExceptionAssignment_7_3(), "rule__OutputExpression__ValueExceptionAssignment_7_3");
					put(grammarAccess.getDefTestAccess().getNameAssignment_1(), "rule__DefTest__NameAssignment_1");
					put(grammarAccess.getDefTestAccess().getDefFuncAssignment_3(), "rule__DefTest__DefFuncAssignment_3");
					put(grammarAccess.getDefTestAccess().getDataTypeValuesAssignment_5_0(), "rule__DefTest__DataTypeValuesAssignment_5_0");
					put(grammarAccess.getDefTestAccess().getDataTypeValuesAssignment_5_1_1(), "rule__DefTest__DataTypeValuesAssignment_5_1_1");
					put(grammarAccess.getDefTestAccess().getOutputExpressionAssignment_8(), "rule__DefTest__OutputExpressionAssignment_8");
					put(grammarAccess.getDataTypeValueAccess().getPrimaryAssignment_0(), "rule__DataTypeValue__PrimaryAssignment_0");
					put(grammarAccess.getDataTypeValueAccess().getDataTypeInstanceAssignment_1(), "rule__DataTypeValue__DataTypeInstanceAssignment_1");
					put(grammarAccess.getDataTypeValueAccess().getDefDataValueAssignment_2(), "rule__DataTypeValue__DefDataValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ItlDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ItlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
