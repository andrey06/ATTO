import com.aestheticintegration.realjava.SimpleProg

function SimpleProg.myFunc4 (value: String): String {
	if (value = "ABC")
	then "AAA"  
	else "BBBBB"
	endif 
}
/*
function SimpleProg.myFunc4a (value: int): String {
	if (value = 123)
	then "QWE111"  
	else "QWE222"
	endif 
}
function SimpleProg.myFunc4b (value1: Boolean, value2: Integer, value3: Float): String {
	if (value1 = true)
	then 
		if (value2 = 1)
		then "QWE111"  
		else 
			if (value3 <= 0.)
			then "KU"
			else "AGU"
			endif
		endif
	else "QWE222"
	endif 
}
*/
/*
docker run -it eu.gcr.io/imandra-core-env/imandra-pure-bin


let simpleProg_myFunc4 (value : string): string =
	if value  = "ABC" 
	then "AAA" 
	else "BBBBB"
;;
let rs = Decompose.top "simpleProg_myFunc4";; 
Reflect.Mode.program ();;
Extract.to_file ~signature:"simpleProg_myFunc4" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;
let tcs = List.map Mex.of_region rs;;
 
let simpleProg_myFunc4a (value : int): string =
	if value  = 123 
	then "QWE111"
	else "QWE222"
;;
let rs = Decompose.top "simpleProg_myFunc4a";; 
Reflect.Mode.program ();;
Extract.to_file ~signature:"simpleProg_myFunc4a" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;
let tcs = List.map Mex.of_region rs;;

let simpleProg_myFunc4b (value1, value2, value3 : bool * int * float): string =
	if value1  = true 
	then if value2  = 1 
	then "QWE111"
	else if value3  <= 0.0 
	then "KU"
	else "AGU"
	else "QWE222"
;;
let rs = Decompose.top "simpleProg_myFunc4b";; 
Reflect.Mode.program ();;
Extract.to_file ~signature:"simpleProg_myFunc4b" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;
let tcs = List.map Mex.of_region rs;;






let qwe (value:int): string =
	if value  = 1
	then "AAA"
	else "BBB"
;;
let qwe (value: string): string =
	if value  = "ABC" 
	then "AAA"
	else "BBB"
;; 

// Decompose and get regions
let rs = Decompose.top "qwe";; 

// Obtains the Mex module
Reflect.Mode.program ();;
Extract.to_file ~signature:"qwe" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;

// Constraints and Invariants
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;

// Test-cases
let tcs = List.map Mex.of_region rs;;

// Call function for each region
qwe {Mex.value = ???}

*/



/*

let test3 value =
	if value  = 1
	then "AAA"
	else "BBB"
;;

docker run -it -v /Users/AndreyIgnatovich/runtime-EclipseXtext/Test1/printers:/home/imandra/temp eu.gcr.io/imandra-core-env/imandra_bin

let simpleProg_myFunc4(value) =
	if value  = "Abc" 
	then "ASDF"
	else "QWE222dd"
;;
let simpleProg_myFunc4a(value) =
	if value  = 123 
	then "QWE111"
	else "QWE222"
;;
let simpleProg_myFunc4b(value1, value2, value3) =
	if value1  = true 
	then if value2  = 1 
	then "QWE111"
	else if value3  <= 0.0 
	then "KU"
	else "AGU"
	else "QWE222"
;;

:load_ocaml /home/imandra/temp/prString_myFunc4.ml;;
 
:testgen simpleProg_myFunc4 with_printer prString_myFunc4;;


let test5 value =
	if (value  = "A")
	then 1
	else 2
;;
:decompose test5;;

*/