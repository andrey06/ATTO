import com.aestheticintegration.realjava.SimpleProg
import com.aestheticintegration.realjava.dataobject.Animal
import com.aestheticintegration.realjava.dataobject.Pet

datatype Animal {
	name: String
	age: Float   
}
datatype Pet {
	owner: String
}  
 
datavalue animal1 = Animal("My Dog", 10.0)
datavalue animal2 = Animal("My Cat", 1.22)
datavalue Pet1 = Pet("Uncle Sam")
datavalue Pet2 = Pet("Ant Ann")
 
function SimpleProg.myTest5 (animal: Animal): Animal {
	if (animal.age >= 2.0 )   
	then animal1 
	else Animal("Your Cat", 1.) 
	endif  
}
function SimpleProg.myTest5a(pet: Pet): String {
	if (pet.owner ="Uncle Sam")   
	then "USA"  
	else "UK" 
	endif  
}  
function SimpleProg.myTest5b(param: int): Animal {
	if (param = 0)   
	then Exception("Wrong_param") 
	else if (param = 1)
		then Animal("Your Cat", 1.)
		else animal2
		endif
	endif  
}  
 
test test1 = SimpleProg.myTest5(Animal("My Dog Cat", 5.)): animal1
test test2 = SimpleProg.myTest5a(Pet1): "USA"
test test3 = SimpleProg.myTest5a(Pet2): "UK"

test test4 = SimpleProg.myTest5b(0): Exception("Wrong_param") 
test test5 = SimpleProg.myTest5b(1): Animal("Your Cat", 1.)
test test6a = SimpleProg.myTest5b(2): animal2

/*     
docker run -it eu.gcr.io/imandra-core-env/imandra-pure-bin

type animal = {
	name: string;
	age: float; 
}
;; 
type pet = { 
	owner: string;     
}   
;;   
let animal1 = {name="My Dog"; age=10.0}
;;
let animal2 = {name="My Cat"; age=1.22}
;;
let pet1 = {owner="Uncle Sam"}
;;
let pet2 = {owner="Ant Ann"} 
;;
let simpleProg_myTest5 animal =
	if animal.age  >= 2.0 
	then animal1
	else {name="Your Cat"; age=1.0} 
;;
let simpleProg_myTest5a pet =
	if pet.owner  = "Uncle Sam" 
	then "USA"
	else "UK"
;;
simpleProg_myTest5 {name="My Dog Cat"; age=5.0}
;;
simpleProg_myTest5a pet1
;;
simpleProg_myTest5a pet2
;;
 
let rs = Decompose.top "simpleProg_myTest5b";; 
Reflect.Mode.program ();;
Extract.to_file ~signature:"simpleProg_myTest5b" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;
let tcs = List.map Mex.of_region rs;;

let rs = Decompose.top "simpleProg_myTest5a";; 
Reflect.Mode.program ();;
Extract.to_file ~signature:"simpleProg_myTest5a" ~filename:"mex.ml" ();;
System.mod_use "mex.ml";;
List.iter (fun r -> print_string (Decompose.string_of_region r)) rs;;
let tcs = List.map Mex.of_region rs;;

 */
